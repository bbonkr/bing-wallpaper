/* tslint:disable */
/* eslint-disable */
/**
 * Today Bing images 1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ApiResponseModel
 */
export interface ApiResponseModel {
    /**
     * 
     * @type {number}
     * @memberof ApiResponseModel
     */
    statusCode?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponseModel
     */
    message?: string | null;
}
/**
 * 
 * @export
 * @interface ImageItemModel
 */
export interface ImageItemModel {
    /**
     * 
     * @type {string}
     * @memberof ImageItemModel
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImageItemModel
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImageItemModel
     */
    fileName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImageItemModel
     */
    fileExtension?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ImageItemModel
     */
    fileSize?: number;
    /**
     * 
     * @type {number}
     * @memberof ImageItemModel
     */
    createdAt?: number;
    /**
     * 
     * @type {string}
     * @memberof ImageItemModel
     */
    copyright?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImageItemModel
     */
    copyrightLink?: string | null;
}
/**
 * 
 * @export
 * @interface ImageItemModelIPagedModel
 */
export interface ImageItemModelIPagedModel {
    /**
     * 
     * @type {number}
     * @memberof ImageItemModelIPagedModel
     */
    currentPage?: number;
    /**
     * 
     * @type {Array<ImageItemModel>}
     * @memberof ImageItemModelIPagedModel
     */
    items?: Array<ImageItemModel> | null;
    /**
     * 
     * @type {number}
     * @memberof ImageItemModelIPagedModel
     */
    limit?: number;
    /**
     * 
     * @type {number}
     * @memberof ImageItemModelIPagedModel
     */
    totalItems?: number;
    /**
     * 
     * @type {number}
     * @memberof ImageItemModelIPagedModel
     */
    totalPages?: number;
}
/**
 * 
 * @export
 * @interface ImageItemModelIPagedModelApiResponseModel
 */
export interface ImageItemModelIPagedModelApiResponseModel {
    /**
     * 
     * @type {number}
     * @memberof ImageItemModelIPagedModelApiResponseModel
     */
    statusCode?: number;
    /**
     * 
     * @type {string}
     * @memberof ImageItemModelIPagedModelApiResponseModel
     */
    message?: string | null;
    /**
     * 
     * @type {ImageItemModelIPagedModel}
     * @memberof ImageItemModelIPagedModelApiResponseModel
     */
    data?: ImageItemModelIPagedModel;
}
/**
 * 
 * @export
 * @interface LogModel
 */
export interface LogModel {
    /**
     * 
     * @type {string}
     * @memberof LogModel
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogModel
     */
    machineName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogModel
     */
    logged?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LogModel
     */
    loggedAt?: number;
    /**
     * 
     * @type {string}
     * @memberof LogModel
     */
    level?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogModel
     */
    message?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogModel
     */
    logger?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogModel
     */
    callsite?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogModel
     */
    exception?: string | null;
}
/**
 * 
 * @export
 * @interface LogModelIPagedModel
 */
export interface LogModelIPagedModel {
    /**
     * 
     * @type {number}
     * @memberof LogModelIPagedModel
     */
    currentPage?: number;
    /**
     * 
     * @type {Array<LogModel>}
     * @memberof LogModelIPagedModel
     */
    items?: Array<LogModel> | null;
    /**
     * 
     * @type {number}
     * @memberof LogModelIPagedModel
     */
    limit?: number;
    /**
     * 
     * @type {number}
     * @memberof LogModelIPagedModel
     */
    totalItems?: number;
    /**
     * 
     * @type {number}
     * @memberof LogModelIPagedModel
     */
    totalPages?: number;
}
/**
 * 
 * @export
 * @interface LogModelIPagedModelApiResponseModel
 */
export interface LogModelIPagedModelApiResponseModel {
    /**
     * 
     * @type {number}
     * @memberof LogModelIPagedModelApiResponseModel
     */
    statusCode?: number;
    /**
     * 
     * @type {string}
     * @memberof LogModelIPagedModelApiResponseModel
     */
    message?: string | null;
    /**
     * 
     * @type {LogModelIPagedModel}
     * @memberof LogModelIPagedModelApiResponseModel
     */
    data?: LogModelIPagedModel;
}

/**
 * BingImagesApi - axios parameter creator
 * @export
 */
export const BingImagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10BingImagesGetImages: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/BingImages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BingImagesApi - functional programming interface
 * @export
 */
export const BingImagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BingImagesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiv10BingImagesGetImages(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiv10BingImagesGetImages(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BingImagesApi - factory interface
 * @export
 */
export const BingImagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BingImagesApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10BingImagesGetImages(options?: any): AxiosPromise<ApiResponseModel> {
            return localVarFp.apiv10BingImagesGetImages(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BingImagesApi - object-oriented interface
 * @export
 * @class BingImagesApi
 * @extends {BaseAPI}
 */
export class BingImagesApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BingImagesApi
     */
    public apiv10BingImagesGetImages(options?: any) {
        return BingImagesApiFp(this.configuration).apiv10BingImagesGetImages(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FilesApi - axios parameter creator
 * @export
 */
export const FilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} fileName 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10FilesGetFileByFileName: async (fileName: string, type?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('apiv10FilesGetFileByFileName', 'fileName', fileName)
            const localVarPath = `/api/v1/Files/{fileName}`
                .replace(`{${"fileName"}}`, encodeURIComponent(String(fileName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10FilesGetFileById: async (id: string, type?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiv10FilesGetFileById', 'id', id)
            const localVarPath = `/api/v1/Files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesApi - functional programming interface
 * @export
 */
export const FilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} fileName 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiv10FilesGetFileByFileName(fileName: string, type?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiv10FilesGetFileByFileName(fileName, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiv10FilesGetFileById(id: string, type?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiv10FilesGetFileById(id, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesApi - factory interface
 * @export
 */
export const FilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} fileName 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10FilesGetFileByFileName(fileName: string, type?: string, options?: any): AxiosPromise<any> {
            return localVarFp.apiv10FilesGetFileByFileName(fileName, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10FilesGetFileById(id: string, type?: string, options?: any): AxiosPromise<any> {
            return localVarFp.apiv10FilesGetFileById(id, type, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
export class FilesApi extends BaseAPI {
    /**
     * 
     * @param {string} fileName 
     * @param {string} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public apiv10FilesGetFileByFileName(fileName: string, type?: string, options?: any) {
        return FilesApiFp(this.configuration).apiv10FilesGetFileByFileName(fileName, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public apiv10FilesGetFileById(id: string, type?: string, options?: any) {
        return FilesApiFp(this.configuration).apiv10FilesGetFileById(id, type, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ImagesApi - axios parameter creator
 * @export
 */
export const ImagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10ImagesGetAll: async (page?: number, take?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImagesApi - functional programming interface
 * @export
 */
export const ImagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImagesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiv10ImagesGetAll(page?: number, take?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageItemModelIPagedModelApiResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiv10ImagesGetAll(page, take, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ImagesApi - factory interface
 * @export
 */
export const ImagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImagesApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10ImagesGetAll(page?: number, take?: number, options?: any): AxiosPromise<ImageItemModelIPagedModelApiResponseModel> {
            return localVarFp.apiv10ImagesGetAll(page, take, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ImagesApi - object-oriented interface
 * @export
 * @class ImagesApi
 * @extends {BaseAPI}
 */
export class ImagesApi extends BaseAPI {
    /**
     * 
     * @param {number} [page] 
     * @param {number} [take] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    public apiv10ImagesGetAll(page?: number, take?: number, options?: any) {
        return ImagesApiFp(this.configuration).apiv10ImagesGetAll(page, take, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LogsApi - axios parameter creator
 * @export
 */
export const LogsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [take] 
         * @param {string} [level] 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10LogsGetAll: async (page?: number, take?: number, level?: string, keyword?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (level !== undefined) {
                localVarQueryParameter['level'] = level;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogsApi - functional programming interface
 * @export
 */
export const LogsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [take] 
         * @param {string} [level] 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiv10LogsGetAll(page?: number, take?: number, level?: string, keyword?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogModelIPagedModelApiResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiv10LogsGetAll(page, take, level, keyword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LogsApi - factory interface
 * @export
 */
export const LogsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LogsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [take] 
         * @param {string} [level] 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiv10LogsGetAll(page?: number, take?: number, level?: string, keyword?: string, options?: any): AxiosPromise<LogModelIPagedModelApiResponseModel> {
            return localVarFp.apiv10LogsGetAll(page, take, level, keyword, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LogsApi - object-oriented interface
 * @export
 * @class LogsApi
 * @extends {BaseAPI}
 */
export class LogsApi extends BaseAPI {
    /**
     * 
     * @param {number} [page] 
     * @param {number} [take] 
     * @param {string} [level] 
     * @param {string} [keyword] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogsApi
     */
    public apiv10LogsGetAll(page?: number, take?: number, level?: string, keyword?: string, options?: any) {
        return LogsApiFp(this.configuration).apiv10LogsGetAll(page, take, level, keyword, options).then((request) => request(this.axios, this.basePath));
    }
}


